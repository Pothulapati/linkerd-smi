name: Release
on:
  push:
    tags:
    - "*"
permissions:
  contents: read
env:
  GH_ANNOTATION: true
jobs:
  docker_build:
    runs-on: ubuntu-20.04
    name: Build SMI Extension
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@722adc63f1aa60a57ec37892e133b1d319cae598
    - name: Set environment variables from scripts
      run: |
        . bin/_tag.sh
        echo "TAG=$(CI_FORCE_CLEAN=1 bin/root-tag)" >> $GITHUB_ENV

        echo "DOCKER_REGISTRY=ghcr.io/linkerd" >> $GITHUB_ENV
        echo "DOCKER_BUILDKIT_CACHE=${{ runner.temp }}/.buildx-cache" >> $GITHUB_ENV
    - name: Cache docker layers
      uses: actions/cache@b8204782bbb5f872091ecc5eb9cb7d004e35b1fa
      with:
        path: ${{ env.DOCKER_BUILDKIT_CACHE }}
        key: ${{ runner.os }}-buildx-smi-${{ env.TAG }}
        restore-keys: |
          ${{ runner.os }}-buildx-smi-
    - name: Set up QEMU
      uses: docker/setup-qemu-action@27d0a4f181a40b142cce983c5393082c365d1480
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e673438944759779e411a0f7ceef3ba437dccfa0
    - name: Build SMI docker images and CLI
      env:
        DOCKER_MULTIARCH: 1
        CLI_MULTIARCH: 1
        # Need to push here instead for multi-arch image push to work
        DOCKER_PUSH: 1
      run: |
        echo "${{ secrets.DOCKER_GHCR_PAT }}" | docker login ghcr.io -u "${{ secrets.DOCKER_GHCR_USERNAME }}" --password-stdin
        bin/docker-build
        bin/build-cli-bin
        bin/helm-build package
    - name: Create artifact with CLI and helm packages
      env:
        ARCHIVES: /home/runner/archives
      run: |
        mkdir -p $ARCHIVES/cli
        mkdir -p $ARCHIVES/helm
        cp -r target/cli/ $ARCHIVES
        cp -r target/helm/ $ARCHIVES
    - name: Upload artifact
      uses: actions/upload-artifact@3446296876d12d4e3a0f3145a3c87e67bf0a16b5
      with:
        name: build-archives
        path: /home/runner/archives
  integration_tests:
    needs: [docker_build]
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 60
    name: Integration tests
    strategy:
      matrix:
        test: [helm, cli]
    steps:
    - name: Checkout code
      uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
    - name: Set environment variables from scripts
      run: |
        . bin/_tag.sh
        echo "TAG=$(CI_FORCE_CLEAN=1 bin/root-tag)" >> $GITHUB_ENV
    - name: Try to load cached Go modules
      uses: actions/cache@70655ec8323daeeaa7ef06d7c56e1b9191396cbe
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Download image archives
      uses: actions/download-artifact@18f0f591fbc635562c815484d73b6e8e3980482e
      with:
        name: build-archives
    - name: Create k8s Kind Cluster
      uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"
    - name: Load the SMI extension CLI and Images
      run: |
        mkdir -p $HOME/.linkerd2/bin
        echo "$HOME/.linkerd2/bin" >> $GITHUB_PATH
        cp build-archives/linkerd-smi-linux-amd64 "$HOME/.linkerd2/bin/linkerd-smi"
        chmod +x $HOME/.linkerd2/bin/linkerd-smi
    - name: Install the Linkerd CLI
      run : |
        curl -sL https://run.linkerd.io/install-edge | sh
    - name: Run Helm Integration Tests
      if: ${{ matrix.test == 'helm' }}
      run: |
          projectdir=$(pwd)
          GO111MODULE=on go test --failfast --mod=readonly "./test" --linkerd="$HOME/.linkerd2/bin/linkerd" --helm-path="$projectdir/bin/helm" --smi-helm-chart="$projectdir/charts/linkerd-smi" --smi-helm-version="$TAG" --integration-tests
    - name: Run CLI Integration Tests
      if: ${{ matrix.test == 'cli' }}
      run: |
        GO111MODULE=on go test --failfast --mod=readonly "./test" --linkerd="$HOME/.linkerd2/bin/linkerd" --integration-tests
  gh_release:
    name: Create GH release
    timeout-minutes: 30
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    needs: [integration_tests]
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
    - name: Set environment variables from scripts
      run: |
        . bin/_tag.sh
        . bin/_release.sh
        echo "TAG=$(CI_FORCE_CLEAN=1 bin/root-tag)" >> $GITHUB_ENV
        extract_release_notes NOTES.md
    - name: Download CLI archives
      uses: actions/download-artifact@18f0f591fbc635562c815484d73b6e8e3980482e
      with:
        name: build-archives
    - name: Generate SHA256SUMS
      run: |
        mkdir -p ./target/release
        OS="darwin windows linux-amd64 darwin-arm64 linux-arm64 linux-arm"
        for os in $OS; do
          ext=$os
          if [ "$os" = windows ]; then
            ext=windows.exe
          fi
          filepath=./target/release/linkerd-smi-${{ env.TAG }}-$ext
          cp "build-archives/linkerd-$os" "$filepath"
          openssl dgst -sha256 "$filepath" | awk '{print $2}' > "$filepath.sha256"
          echo "$filepath"
        done

        # generate for helm chart
        mkdir -p ./target/helm
        cp build-archives/linkerd-smi-${{ env.TAG }}.tgz ./target/helm
        openssl dgst -sha256 build-archives/linkerd-smi-${{ env.TAG }}.tgz | awk '{print $2}' > "build-archives/linkerd-smi-$TAG.tgz.sha256"
    - name: Create release
      id: create_release
      uses: softprops/action-gh-release@91409e712cf565ce9eff10c87a8d1b11b81757ae
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        draft: false
        prerelease: false
        body_path: NOTES.md
        files: |
          ./target/release/linkerd-smi-*.tgz
          ./target/release/linkerd-smi-*.tgz.sha256
          ./target/release/linkerd-smi-*-darwin*
          ./target/release/linkerd-smi-*-darwin*.sha256
          ./target/release/linkerd-smi-*-linux-*
          ./target/release/linkerd-smi-*-linux-*.sha256
          ./target/release/linkerd-smi-*-windows.exe
          ./target/release/linkerd-smi-*-windows.exe.sha256
